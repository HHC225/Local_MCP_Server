"""
Tree of Thoughts Tool Wrapper for MCP Registration
"""
from fastmcp import Context
from src.tools.reasoning.tree_of_thoughts_tool import TreeOfThoughtsTool

# Initialize tool instance
_tot_tool = TreeOfThoughtsTool()


async def tt(
    action: str,
    session_id: str = None,
    problem_statement: str = None,
    config: dict = None,
    parent_node_id: str = None,
    thoughts: list = None,
    node_id: str = None,
    evaluation: dict = None,
    search_strategy: str = None,
    dead_end_node_id: str = None,
    backtrack_strategy: str = None,
    solution: str = None,
    ctx: Context = None
) -> str:
    """
    Advanced Tree of Thoughts (ToT) framework for complex software development and system design problem-solving.
    
    This tool implements the complete ToT framework optimized for IT professionals working on application development, 
    server architecture, and system design challenges.
    
    üå≥ **Software Development Components:**
    
    **üîß Architecture Decomposition**: Breaks complex system design problems into manageable components (frontend, backend, database, APIs, etc.)
    **üí° Solution Generation**: Uses sampling or proposing strategies to explore multiple implementation approaches
    **üìä Code/Design Evaluation**: Evaluates solutions using technical criteria (performance, scalability, maintainability, security)  
    **üîç Implementation Search**: Employs systematic exploration to find optimal technical solutions
    
    **Key Features for Software Development:**
    - **Multi-Architecture Exploration**: Explore different system architectures simultaneously (microservices vs monolith, REST vs GraphQL, etc.)
    - **Technical Backtracking**: Return to previous design decisions when implementation proves problematic
    - **Code Quality Assessment**: Evaluate code approaches for maintainability, performance, and scalability
    - **API Design Strategies**: Choose between different API design patterns and implementation approaches
    - **Testing Strategy Planning**: Develop comprehensive testing approaches (unit, integration, E2E, performance)
    - **Development Workflow Management**: Track multiple development approaches and technical decisions
    
    **Use Cases in Software Development:**
    - **System Architecture Design**: Designing scalable web applications, microservices, or distributed systems
    - **API Development Planning**: Choosing optimal API patterns, authentication methods, and data flow strategies
    - **Database Design**: Exploring different database schemas, indexing strategies, and data modeling approaches
    - **Performance Optimization**: Analyzing bottlenecks and exploring multiple optimization strategies
    - **Testing Strategy Development**: Planning comprehensive testing approaches for complex applications
    - **Technology Stack Selection**: Evaluating different frameworks, libraries, and tools for projects
    - **Code Refactoring Plans**: Systematic approach to legacy code improvement and modernization
    - **DevOps Pipeline Design**: Planning CI/CD workflows, deployment strategies, and infrastructure setup
    
    **Development Workflow:**
    1. Define your technical problem or system requirement
    2. Generate multiple implementation approaches using LLM (sampling or proposing strategies)
    3. Evaluate each approach for technical feasibility, scalability, and maintainability using LLM
    4. Search for the most promising technical path using systematic exploration
    5. Backtrack when technical constraints make paths infeasible
    6. Continue until optimal technical solution is identified
    
    **Actions:**
    - create_session: Start a new technical problem-solving session
    - add_thoughts: Add multiple implementation approaches generated by LLM to the tree
    - add_evaluation: Add LLM evaluation results for technical solutions (value: 1-10, confidence: 0-1, viability: promising/uncertain/dead_end, reasoning)
    - search_next: Find the next best technical approach to explore
    - backtrack: Return to previous design decisions when current path proves problematic
    - set_solution: Document the final technical solution with implementation details
    - get_session: Retrieve complete technical analysis and decision history
    - list_sessions: List all active software development problem-solving sessions
    - display_results: Display ranked solutions with scores and paths
    
    **Important Note:** 
    This tool manages the Tree of Thoughts structure and algorithms. All actual thinking, solution generation, 
    and evaluation is performed by the LLM. The tool provides the framework for organizing and navigating 
    through the solution space systematically.
    
    Args:
        action: The action to perform (create_session, add_thoughts, add_evaluation, search_next, backtrack, 
               set_solution, get_session, list_sessions, display_results)
        session_id: Session ID (required for most actions)
        problem_statement: Problem to solve (required for create_session)
        config: Configuration dict with search_strategy (bfs/dfs), generation_strategy (sampling/proposing),
               evaluation_method (value/vote), max_depth, max_branches
        parent_node_id: Parent node to attach thoughts to (optional, defaults to root)
        thoughts: List of thought strings to add (required for add_thoughts)
        node_id: Node ID to evaluate (required for add_evaluation)
        evaluation: Evaluation dict with value (1-10), confidence (0-1), viability (promising/uncertain/dead_end),
                   reasoning (required for add_evaluation)
        search_strategy: Search strategy override for search_next (bfs or dfs)
        dead_end_node_id: Node ID that reached dead end (required for backtrack)
        backtrack_strategy: Strategy for backtracking (parent, best_alternative, root)
        solution: Final solution text (required for set_solution)
    
    Returns:
        JSON response with action results
    """
    return await _tot_tool.execute(
        action=action,
        session_id=session_id,
        problem_statement=problem_statement,
        config=config,
        parent_node_id=parent_node_id,
        thoughts=thoughts,
        node_id=node_id,
        evaluation=evaluation,
        search_strategy=search_strategy,
        dead_end_node_id=dead_end_node_id,
        backtrack_strategy=backtrack_strategy,
        solution=solution,
        ctx=ctx
    )
