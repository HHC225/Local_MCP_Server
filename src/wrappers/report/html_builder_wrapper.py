"""
HTML Builder Wrapper for MCP Registration
"""
from typing import Dict, Any
from fastmcp import Context
from src.tools.report.html_builder_tool import HTMLBuilderTool

# Initialize tool instance
_html_builder_tool = HTMLBuilderTool()


async def build_report_from_json(
    report_json: Dict[str, Any],
    ctx: Context = None
) -> Dict[str, Any]:
    """
    Build final HTML report from structured JSON data.
    
    This tool takes the structured JSON generated by the LLM and creates a professional,
    self-contained HTML report with embedded CSS and JavaScript.
    
    **Required JSON Fields:**
    - report_title: String - Clear, concise title summarizing the event
    - report_type: String - Type of report (e.g., Incident Analysis, Security Alert, System Outage Postmortem)
    - severity: String - One of: "Low", "Medium", "High", "Critical"
    - strategic_summary: Object with:
      - overview: String - 2-3 sentence executive summary. What happened and what is the current state?
      - key_takeaways: Array of strings - The most important findings or conclusions
      - business_implications: String - How does this affect the business?
      - next_steps_summary: String - High-level summary of what will happen next
    - key_findings: Object with:
      - root_cause: String - The determined root cause or leading hypothesis
      - key_events: Array of strings - Chronological list of significant events
      - affected_systems: Array of strings - List of impacted systems, services, or user groups
    - metadata: Object with:
      - reported_date: String - When reported or detected (ISO 8601 format)
      - tags: Array of strings - Categorization tags
    
    **Output:**
    The generated HTML report includes:
    - Professional styling with glassmorphism design
    - Responsive layout that works on all devices
    - Strategic summary section with key takeaways
    - Key findings with root cause and timeline
    - Affected systems overview
    - Metadata and tagging system
    - Print-friendly formatting
    
    **File Location:**
    Reports are saved to: `output/reports/{report_type}_{timestamp}.html`
    
    Args:
        report_json: Structured JSON data following the fixed schema
        ctx: MCP context for logging
        
    Returns:
        Dictionary containing:
        - status: "success" or "error"
        - file_path: Path to generated HTML file (on success)
        - report_title: Title of the report
        - report_type: Type of report
        - severity: Severity level
        - error_message: Error details (on failure)
    
    **Example Response:**
    ```json
    {
      "status": "success",
      "file_path": "/path/to/output/reports/incident_20251016_143022.html",
      "report_title": "Database Connection Pool Exhaustion",
      "report_type": "Incident Analysis",
      "severity": "High"
    }
    ```
    """
    return await _html_builder_tool.execute(
        report_json=report_json,
        ctx=ctx
    )
